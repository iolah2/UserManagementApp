using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using UserManagementApp.Models;
using UserManagementApp.Repositories;

namespace UserManagementApp.Views
{
    public partial class UserDataListForm<T> : Form where T : class
    {
        readonly IRepository<T> repository;
        public UserDataListForm(IRepository<T> repository)
        {
            this.repository = repository;
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            userGridControl.DataSource = repository.GetList();            
            //new System.ComponentModel.BindingList<UserManagementApp.Models.User>() /* TODO: Assign the real data here.*/;
        }

        private void ModifyBtn_Click(object sender, EventArgs e)
        {
            if (userListGridView.SelectedRowsCount != 0)
            {
                User user = userListGridView.GetRow(userListGridView.FocusedRowHandle) as User;
                              
                IRepository<User> repo = repository as UserRepository;
                if (repo.SetActItemById(user.ID))
                {               
                    DetailForm/*<User>*/ detailForm = new DetailForm/*<User>*/(repo)//User and generic escape
                    {
                        StartPosition = FormStartPosition.CenterParent
                    };
                    detailForm.TopMost = true;
                    detailForm.StartPosition = FormStartPosition.CenterScreen;
                    detailForm.ShowDialog();
                    userListGridView.RefreshData();
                }
                else MessageBox.Show($"A választott felhasználó {user} nem található a felhasználók listájában!");
            }
        }

        private void XMLExportBtn_Click(object sender, EventArgs e)
        {
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                (repository as IExport).ExportDataList(filePath: saveFileDialog.FileName);
            }
        }
    }
}
